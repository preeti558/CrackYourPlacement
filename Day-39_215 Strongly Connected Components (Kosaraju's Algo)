Strongly Connected Components (Kosaraju's Algo)(Gfg)

class Solution
{
    public void dfs(int node,boolean[] vis,Stack<Integer>stack,
    ArrayList<ArrayList<Integer>> adj){
        vis[node] = true;
        for(int it : adj.get(node)){
            if(!vis[it]){
                dfs(it,vis,stack,adj);
            }
        }
        stack.push(node);
    }
    
    public void dfs2(int node,boolean[] vis,ArrayList<ArrayList<Integer>> list){
        vis[node] = true;
        for(int it:list.get(node)){
            if(!vis[it]){
                dfs2(it,vis,list);
            }
        }
        
    }
    //Function to find number of strongly connected components in the graph.
    public int kosaraju(int V, ArrayList<ArrayList<Integer>> adj)
    {
        //code here
        boolean[] vis = new boolean[V];
        Stack<Integer> stack = new Stack<>();
        for(int i = 0;i<V;i++){
            if(!vis[i]){
                dfs(i,vis,stack,adj);
            }
        }
        
        ArrayList<ArrayList<Integer>> list= new ArrayList<>();
        for(int i = 0;i<V;i++){
            list.add(new ArrayList<>());
        }
        
        for(int i = 0;i<V;i++){
        
            for(int it:adj.get(i)){
                list.get(it).add(i);
            }
        }
        vis = new boolean[V];
        int scc = 0;
        while(!stack.isEmpty()){
            int node = stack.pop();
            if(!vis[node]){
                scc++;
                dfs2(node,vis,list);
            }
        }
        return scc;
    }
}
