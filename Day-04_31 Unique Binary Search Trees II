95. Unique Binary Search Trees II

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<TreeNode> generateTrees(int n) {
        return n>0 ? constructTree(1,n) : new ArrayList<>();
    }
    private List<TreeNode> constructTree(int start, int end){
        List<TreeNode> all_tree = new ArrayList<>();
        if(start>end){
            all_tree.add(null);
            return all_tree;
        }
        for(int i=start; i<=end ;i++){
            List<TreeNode> leftTree = constructTree(start, i-1);
            List<TreeNode> rightTree = constructTree(i+1, end);
            for(TreeNode l : leftTree){
                for(TreeNode r : rightTree){
                    TreeNode curr = new TreeNode(i);
                    curr.left =l;
                    curr.right =r;
                    all_tree.add(curr);
                }
            }
        }
        return all_tree;
    }
}
