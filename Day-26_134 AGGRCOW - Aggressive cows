AGGRCOW - Aggressive cows

import java.util.*;

class Main
{
    // Function to check if we can place cows with at least 'minDist' distance apart
    private static boolean canPlaceCows(int[] stalls, int n, int c, int minDist) {
        int count = 1;  // Place the first cow in the first stall
        int lastPosition = stalls[0];

        for (int i = 1; i < n; i++) {
            if (stalls[i] - lastPosition >= minDist) {
                count++;
                lastPosition = stalls[i];

                if (count == c) {  // All cows are placed successfully
                    return true;
                }
            }
        }

        return false;
    }

    // Function to find the largest minimum distance
    private static int largestMinDist(int[] stalls, int n, int c) {
        Arrays.sort(stalls);  // Sort the stalls

        int low = 1;  // Minimum possible distance
        int high = stalls[n - 1] - stalls[0];  // Maximum possible distance
        int best = 0;

        while (low <= high) {
            int mid = (low + high) / 2;

            if (canPlaceCows(stalls, n, c, mid)) {
                best = mid;  // Update the best found distance
                low = mid + 1;  // Try for a larger distance
            } else {
                high = mid - 1;  // Try for a smaller distance
            }
        }

        return best;
    }

    public static void main (String[] args) throws java.lang.Exception
    {
        Scanner scanner = new Scanner(System.in);
        int t = scanner.nextInt();  // Number of test cases

        while (t-- > 0) {
            int n = scanner.nextInt();  // Number of stalls
            int c = scanner.nextInt();  // Number of cows

            int[] stalls = new int[n];
            for (int i = 0; i < n; i++) {
                stalls[i] = scanner.nextInt();
            }

            int result = largestMinDist(stalls, n, c);
            System.out.println(result);
        }

        scanner.close();
    }
}
