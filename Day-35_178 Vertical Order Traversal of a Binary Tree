987. Vertical Order Traversal of a Binary Tree

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
     Map<Integer, TreeMap<Integer, PriorityQueue<Integer>>> map;
    public List<List<Integer>> verticalTraversal(TreeNode root) {
       if(root == null){
        return null;
       }
       map = new TreeMap<>();
       dfs(root, 0, 0);
       List<List<Integer>> res = new LinkedList<>();
       for(int key : map.keySet()){
        List<Integer> list = new LinkedList<>();
        TreeMap<Integer, PriorityQueue<Integer>> tm = map.get(key);
        for(int k : tm.keySet()){
            PriorityQueue<Integer> pq = tm.get(k);
            while(!pq.isEmpty()){
                list.add(pq.poll());
            }
        }
        res.add(list);
       }
       return res;


    }
    private void dfs(TreeNode root, int idx, int level){
        if(root == null){
            return;
        }

        map.putIfAbsent(idx, new TreeMap<>());
        map.get(idx).putIfAbsent(level, new PriorityQueue<>());
        map.get(idx).get(level).add(root.val);
        dfs(root.left , idx-1, level+1);
        dfs(root.right, idx+1, level+1);


    }
}
